
flask run -> Rodar a aplicação.
    - Para funcionar o arquivo de execução deve ser app.py e dentro do mesmo terá que existir um app = Flask(__name__)

Criar endpoint:
    @app.crud("/endpoint_name")
    function()

Json:
    São strings, apesar da semelhança com o dict do python. Importante frisar que o flask está fazendo uma conversão de dict or list para json para que possa ser executado.

    Devemos sempre retornar em formato de lista.

    Solicitar um json: import request junto do Flask
        request.get_json()
    
Return:
    podemos indicar o tipo de retorno recebido como por exemplo um 200 que indica "ok", já com 201 indicamos ok, recebemos algo.

    Utilizaremos uma ferramento do flask smorest: abort -> os tipos de retornos são encontrado na documentação

-------------------------------------------------------------------------------
Smorest:

- Utilizaremos ids para nossos dados

1º passo -> requirements.txt -> para indicar quais bibliotecas o projeto está se utilizando.
2º passo -> .flaskenv -> indicar as variáveis utilizadas no projeto, define as configurações iniciais do projeto. -> FLASK_DEBUG=1 com está variável o meu server se atualiza sozinho.

-------------------------------------------------------------------------------
Blueprint:
    Este metodo interliga as minhas rotas as classes criadas.
    blp = Blueprint("nome", __name__(nome unico), description="Descrição que ira para a documentação")

-------------------------------------------------------------------------------
Rest-apis
    A api vira POO e portanto subdividimos nossas funções em classes em suas rotas correspondetes, no fim o app apenas chamará

    Configurações:
        app.config["PROPAGATE_EXCEPTIONS"] = True -> Pedi que caso ocorra alguma exception, a mesma seja propagada e visualizada na aplicação principal.

        app.config["API_TITLE"] = "Stores REST API" -> Indica o titulo da API na documentação
        app.config[API_VERSION] = "v1" -> Indicamos aversão da API que estamos trabalhando.

        app.config["OPENAPI_VRSION"] = "3.0.3" -> É um padrão para documentação

        app.config["OPENAPI_URL_PREFIX"] = "/" -> Indica qual a raiz da API

        app.config["OPENAPI_SWAGGER_UI_PATH] = "/swagger-ui" -> URL para acessar a minha API

        app.config["OPENAPI_SWAGGER_UI_URL"] = "https://cdn.jsdelivr.net/npm/swagger-ui-dist/" -> Este valor indica aonde deve ser carregado as minhas informações, que serão geradas no PATH indicado acima.
-------------------------------------------------------------------------------
Marshmellow schema:
    Devemos utilizar para defuinir quais as validações dos meus dados e se estão corretos, portanto, ao utilizarmos destes métodos indicaremos a API o que queremos receber.

    imports:
        from marshmallow import Schema, field

    class **(Schema):
        dado_json = filds.type(existem validações para este dado)
    
    fields.Str(dump_only=True(Este dado indica que somente queremos devolver os dados))
    dump_only = Este é um dado que não vem com um json pois este dado é atribuido pela propria API como no caso de ID de um objeto, ou seja, o mesmo recebe o dado quando enviamos o json.

    filds.Str(required=True(podemos enviar os dados e recebelos))
    required = Este dado deve vir no json e por tanto ele necessariamente precisa estar no mesmo.

    Quando não houver a necessidade de um envio ou a indicação de que uma variavel deva receber algo como ID, basta deixarmos os campos vazios.

    -> Ao utlizarmos destas classes, já fazemos as validações mais obvias como o tipo do dado, a presença de um elemento no json.
-------------------------------------------------------------------------------

Utilizando dos schemas:
    basta utilizarmos o decorador de Blueprint 

    @blp.arguments(Schema) -> O valor é direcionado para o método da classe.

    OBS: o dado adicionado como argumento do meu schema também deve ser transposto quando vamos utilizalo em resource, portatno adicione como parâmetro do método.

    OBS2: Os étodos data das minhas rotas não deve mais existir pois o parâmetro passado já faz a solicitação deste json, basta adicionar o mesmo nome.
        @blp.arguments(ItemsSchema)
        def exemplo(self, item_data -> Esse cara já faz o papel do get_json):

    Exemplo:
        @blp.arguments(ItemSchemas)
        def exemplo(self, item_data(Parametro de decorador), item_id(Parametro de método))

    Vantagem:
        Ao utilizarmos de schemas o nosso swagger também se atualiza e indica melhor o que é necessário para cada json solicitado indicando o tipo de dado e os schemas ficam descritos abaixo de todos os endpoints.
--------------------------------------------------------------------------------

Decoradores flask_smorest:
-> A ordem dos decoradores importam, pois em alguns casos o retorno que queremos entregar está no decorador anterior, por exemplo, em caso de o user fazer um update, o nosso retorno deve ser o valor final após a alteração, então não faz sentido o meu response está acima do arguments.
    @blp.response(HTTP_response, Schema correspondente)

Quando tivermos que devolver mais de 1 dado, nosso response tem que estar ciente e retornando o mesmo (Muito comum para gets)
    @blp.response(many=True) -> irá retornar todos os dados, importanto informar que o retorno é em forma de lista portanto prestar atenção na lógica de return.

Está mudança implica na documentação que nos mostra qual o retorno correto para o endpoint e tambŕm o tipo de retorno correto a ser recebido.
# https://blog.teclado.com/python-dictionary-merge-update-operators/


-------------------------------------------------------------------------------
SQLAlchemy: <from flask-sqlalchemy import SQLAlchemy>
-> Permite de forma automatica criar as nossas tabelas e colunas através das sua funções e transforma isso em objetos no python.
    1. criar models e os arquivos que terão o ORM de resource
    2. importar o arquivo que possui a classe SQLAlchemy
    3. class **(db.Model):
        __tablename__ = 'nome'
        colunas = objSQLAlquemy.Column(objSQLAlquemy.Tipo, ValoresOpcionais)
        Valores Opcionais:
            primary_key, unique, nullable
            String(Numero Max de Characters)
            Float(precision=2)
    4. dentro de db.Column(db.ForeingKey('tabela.id'))
    5. item_fk = db.relationship('TabelaModel_FK', back_populates='nome_tabela_atual') -> Faz com que a tabela indique a relação entre eles. Ao usarmos o relationship fazemos com que o objeto em questão veja os items associados a ele;
        back_populates: indica de onde os dados estão vindo, ou seja, de onde vem a associção das tabelas
        lazy: Indica a maneira de armazenar os dados e também diz a minha tabela que só deve buscar algo quando for solicitado.
        
        Ao fazermos está junção indicamos as minhas tabelas aonde elas devem ir buscar os dados, a tabela que possui a fk é onde está o objeto de ligação, ou seja, quando criamos uma loja e queremos associar um item a loja sabe através da relationship que deve ir até a outra ponta da relaçao.
    6. criar um __init__ para a pasta models com a importação dos seus modulos nela, pois assim quando quisermos utiliza-los chamaremos apenas por ele;
-------------------------------------------------------------------------------
Configruando SQLAlchemy:
    1. em app.py import db e models (como possui o __init__ não precisamos fazer mais nada.)
    2. user o pattern padrão do flask
        i. Criar uma função que retorne o proprio app
    3. criar a conexão do banco de dados:
        app.config["SQLALCHEMY_DATABASE_URI"] = ''
    4. criar uma variavel de ambiente para que possamos alterar o nosso banco para qualquer outro:
        app.config["SQLALCHEMY_DATABASE_URI"] = os.getenv('DATABASE_URL', '')
    5. adicionar um parametro (db_url=none):
        desta forma podemos indicar qual banco iremos utilizar ou criar um como indicado no item anterior
            db_url or app.config["SQLALCHEMY_DATABASE_URI"] = os.getenv('DATABASE_URL', '')
    7. app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False:
        para desabilitar os eventos do sistema que irão causar erros.
    8. db.init_app(app):
        para iniciar a conexão do SQLAlchemy com o meu app
    9. criar o comando para criar as tabelas antes de tudo - Caso exista nada acontecerá:
        with app.app_context:
            db.create_all()

                or
        @app.before_first_request
        def create_table():
            db.create_all()

------------------------------------------------------------------------------
Insert: A partir de agora trabalharemos  com itens do banco e portanto não precisamos de validações de campos de forma direta pois já temos os schemas que fazem isto e também temos o modelo do banco que não irá permitir certo tipo de dado.

    'db.session.add()
    db.session.commit()'

    from sqlalchemy.exc import SQLAlchemyError
    IntegrityError: Quando os dados passados pode causar uma inconsistência no banco (Repetir os nomes).

Select 1 : ItemModel.query.get_or_404(item_id) 
    query: é possível se utilizar por conta do model do SQLAlchemy e permite fazer um get no banco de forma mais rápida/simples por conta disso, é utilizado quando queremos buscar ou fazer algo baseado em um valor transmitido por query.
    get_or_404: busca e em caso de erro já retorna o erro.

Select *: utilizaremos o model.query.all() para obter o retono de tudo.

update: Por padrão faremos com que caso o usuário exija a modificação de algo que não exista nós criaremos;
    para a nossa rest api:
        - adicionar um campo extra para store_id no model de schema
        - criar um condicional para que seja possível criar caso não exista.
        
        -> Trabalhar em cima do valor buscado:
        item = ItemModel.query.get(item_id)
        
        if item:
            item.name = item_data["name"]
            item.price = item_data["price"]
        else:
            item = ItemModel(id=item_id, **item_data) -> o id faz com que o itme seja identificado com o valor transmitido na url
        
        db.session.add(item)
        db.session.commit()

        return item

delete: var = model.query.get_or_404(var)

        db.session.delete()
        db.session.commit()
        return {"message": ""}
        
Cascade: Os objetos associados a outros passam a ter a propriedade de ser excluído junto deles, ou seja, se uma store que possui items for excluída os items também são. No pai devemos adicionar um argumento no relacionamento:
    cascade="all, delete" # delete-orphan

Tag: Devemos criar um modelo para tag onde nele existe um relacionamento com as meus outros modelos.Algumas coisas que devemos mutiplicar são por exemplo tags que com nomes iguais, essa verificação pode ser feita de duas formas:
    1. Por o atributo name como unique.
    2. Fazer uma verificação manual o que vai permitir ao nosso sistema criar tags com nomes iguais para coisas diferentes.
--------------------------------------------------------------------------------

JWT
    Criar uma configuração de secret key:
        app.config["JWT_SECRET_KEY"] = ? -> Maneira de garantir a segurança do site pois faz a comparação um JWT enviado por um site e garante que não é um criado por apps externos. Para garantir uma seguraça utilizaremos de um biblioteca para gerar uma chave segura (Por enquanto valor gerado somente 1 vez).
    Criar uma instancia no app com o JWTManager.
        jwt = JWTManager(app)