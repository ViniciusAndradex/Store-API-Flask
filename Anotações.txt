
flask run -> Rodar a aplicação.
    - Para funcionar o arquivo de execução deve ser app.py e dentro do mesmo terá que existir um app = Flask(__name__)

Criar endpoint:
    @app.crud("/endpoint_name")
    function()

Json:
    São strings, apesar da semelhança com o dict do python. Importante frisar que o flask está fazendo uma conversão de dict or list para json para que possa ser executado.

    Devemos sempre retornar em formato de lista.

    Solicitar um json: import request junto do Flask
        request.get_json()
    
Return:
    podemos indicar o tipo de retorno recebido como por exemplo um 200 que indica "ok", já com 201 indicamos ok, recebemos algo.

    Utilizaremos uma ferramento do flask smorest: abort -> os tipos de retornos são encontrado na documentação

-------------------------------------------------------------------------------
Smorest:

- Utilizaremos ids para nossos dados

1º passo -> requirements.txt -> para indicar quais bibliotecas o projeto está se utilizando.
2º passo -> .flaskenv -> indicar as variáveis utilizadas no projeto, define as configurações iniciais do projeto. -> FLASK_DEBUG=1 com está variável o meu server se atualiza sozinho.

-------------------------------------------------------------------------------
Blueprint:
    Este metodo interliga as minhas rotas as classes criadas.
    blp = Blueprint("nome", __name__(nome unico), description="Descrição que ira para a documentação")

-------------------------------------------------------------------------------
Rest-apis
    A api vira POO e portanto subdividimos nossas funções em classes em suas rotas correspondetes, no fim o app apenas chamará

    Configurações:
        app.config["PROPAGATE_EXCEPTIONS"] = True -> Pedi que caso ocorra alguma exception, a mesma seja propagada e visualizada na aplicação principal.

        app.config["API_TITLE"] = "Stores REST API" -> Indica o titulo da API na documentação
        app.config[API_VERSION] = "v1" -> Indicamos aversão da API que estamos trabalhando.

        app.config["OPENAPI_VRSION"] = "3.0.3" -> É um padrão para documentação

        app.config["OPENAPI_URL_PREFIX"] = "/" -> Indica qual a raiz da API

        app.config["OPENAPI_SWAGGER_UI_PATH] = "/swagger-ui" -> URL para acessar a minha API

        app.config["OPENAPI_SWAGGER_UI_URL"] = "https://cdn.jsdelivr.net/npm/swagger-ui-dist/" -> Este valor indica aonde deve ser carregado as minhas informações, que serão geradas no PATH indicado acima.
-------------------------------------------------------------------------------
Marshmellow schema:
    Devemos utilizar para defuinir quais as validações dos meus dados e se estão corretos, portanto, ao utilizarmos destes métodos indicaremos a API o que queremos receber.

    imports:
        from marshmallow import Schema, field

    class **(Schema):
        dado_json = filds.type(existem validações para este dado)
    
    fields.Str(dump_only=True(Este dado indica que somente queremos devolver os dados))
    dump_only = Este é um dado que não vem com um json pois este dado é atribuido pela propria API como no caso de ID de um objeto, ou seja, o mesmo recebe o dado quando enviamos o json.

    filds.Str(required=True(podemos enviar os dados e recebelos))
    required = Este dado deve vir no json e por tanto ele necessariamente precisa estar no mesmo.

    Quando não houver a necessidade de um envio ou a indicação de que uma variavel deva receber algo como ID, basta deixarmos os campos vazios.

    -> Ao utlizarmos destas classes, já fazemos as validações mais obvias como o tipo do dado, a presença de um elemento no json.
-------------------------------------------------------------------------------

Utilizando dos schemas:
    basta utilizarmos o decorador de Blueprint 

    @blp.arguments(Schema) -> O valor é direcionado para o método da classe.

    OBS: o dado adicionado como argumento do meu schema também deve ser transposto quando vamos utilizalo em resource, portatno adicione como parâmetro do método.

    OBS2: Os étodos data das minhas rotas não deve mais existir pois o parâmetro passado já faz a solicitação deste json, basta adicionar o mesmo nome.
        @blp.arguments(ItemsSchema)
        def exemplo(self, item_data -> Esse cara já faz o papel do get_json):

    Exemplo:
        @blp.arguments(ItemSchemas)
        def exemplo(self, item_data(Parametro de decorador), item_id(Parametro de método))

    Vantagem:
        Ao utilizarmos de schemas o nosso swagger também se atualiza e indica melhor o que é necessário para cada json solicitado indicando o tipo de dado e os schemas ficam descritos abaixo de todos os endpoints.
--------------------------------------------------------------------------------

Decoradores flask_smorest:
-> A ordem dos decoradores importam, pois em alguns casos o retorno que queremos entregar está no decorador anterior, por exemplo, em caso de o user fazer um update, o nosso retorno deve ser o valor final após a alteração, então não faz sentido o meu response está acima do arguments.
    @blp.response(HTTP_response, Schema correspondente)

Quando tivermos que devolver mais de 1 dado, nosso response tem que estar ciente e retornando o mesmo (Muito comum para gets)
    @blp.response(many=True) -> irá retornar todos os dados, importanto informar que o retorno é em forma de lista portanto prestar atenção na lógica de return.

Está mudança implica na documentação que nos mostra qual o retorno correto para o endpoint e tambŕm o tipo de retorno correto a ser recebido.
# https://blog.teclado.com/python-dictionary-merge-update-operators/


-------------------------------------------------------------------------------
SQLAlchemy: <from flask-sqlalchemy import SQLAlchemy>
-> Permite de forma automatica criar as nossas tabelas e colunas através das sua funções e transforma isso em objetos no python.
    1. criar models e os arquivos que terão o ORM de resource
    2. importar o arquivo que possui a classe SQLAlchemy
    3. class **(db.Model):
        __tablename__ = 'nome'
        colunas = objSQLAlquemy.Column(objSQLAlquemy.Tipo, ValoresOpcionais)
        Valores Opcionais:
            primary_key, unique, nullable
            String(Numero Max de Characters)
            Float(precision=2)
    4. dentro de db.Column(db.ForeingKey('tabela.id'))
    5. item_fk = db.relationship('TabelaModel_FK', back_populates='nome_tabela_atual') -> Faz com que a tabela indique a relação entre eles. Ao usarmos o relationship fazemos com que o objeto em questão veja os items associados a ele;
        back_populates: indica de onde os dados estão vindo, ou seja, de onde vem a associção das tabelas
        lazy: Indica a maneira de armazenar os dados e também diz a minha tabela que só deve buscar algo quando for solicitado.
        
        Ao fazermos está junção indicamos as minhas tabelas aonde elas devem ir buscar os dados, a tabela que possui a fk é onde está o objeto de ligação, ou seja, quando criamos uma loja e queremos associar um item a loja sabe através da relationship que deve ir até a outra ponta da relaçao.
    6. criar um __init__ para a pasta models com a importação dos seus modulos nela, pois assim quando quisermos utiliza-los chamaremos apenas por ele;
-------------------------------------------------------------------------------
One to Many: 1 loja pode ter many items e 1 item está em 1 loja
